#include <Gamebuino-Meta.h>

#define W 160
#define H 128

#define LAYER_WIDTH 30
#define LAYER_HEIGHT 20
uint8_t layer1[LAYER_HEIGHT][LAYER_WIDTH] = {
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  1,  5,  6,  7,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  2, 13, 13, 13,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  3, 13, 12, 13, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  4, 13, 13, 13, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  2, 13, 13, 13,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  3, 13, 13, 13, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  4, 13, 13, 13, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  2, 13, 13, 13,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  3, 13, 13, 13, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  4, 13, 13, 13, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  2, 13, 13, 13,  9,  0,  0,  0,  0,  0,  0,  0,  1,  5,  6,  7,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  3, 13, 13, 13, 10,  0,  0,  0,  0,  0,  0,  0,  2, 13, 13, 13,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  4, 13, 13, 13, 11,  0,  0,  0,  0,  0,  0,  0,  3, 13, 13, 13, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  2, 13, 13, 13,  9,  0,  0,  0,  0,  0,  0,  0,  4, 13, 13, 13, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  3, 13, 13, 13, 10,  0,  0,  0,  0,  0,  0,  0,  2, 13, 13, 12,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  4, 13, 13, 13, 11,  0,  0,  0,  0,  0,  0,  0,  3, 13, 13, 13, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  2, 13, 13, 13,  9,  0,  0,  1,  5,  6,  7,  5,  6,  7,  5,  6,  7,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  3, 13, 13, 13, 10,  0,  0,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
  {  0,  4, 12, 13, 13, 11,  0,  0,  3, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
  
};

uint8_t layer2[20][28] = {
  { 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 },
  { 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 },
  { 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 },
  { 29, 29, 14, 18, 19, 20, 21, 22, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 },
  { 29, 29, 15, 28, 28, 28, 28, 23, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 },
  { 29, 29, 16, 28, 28, 27, 28, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 },
  { 29, 29, 17, 28, 28, 28, 28, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 },
  { 29, 29, 15, 28, 28, 28, 28, 23, 14, 18, 19, 20, 21, 18, 19, 20, 21, 18, 19, 20, 21, 18, 19, 20, 21, 18, 19, 20 },
  { 29, 29, 16, 28, 26, 28, 28, 24, 15, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 17, 28, 28, 28, 28, 25, 16, 28, 28, 28, 28, 28, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 15, 28, 28, 28, 28, 23, 17, 28, 28, 28, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 16, 28, 28, 28, 28, 24, 15, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 17, 28, 28, 28, 28, 25, 16, 28, 28, 28, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 15, 28, 28, 28, 26, 23, 17, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 16, 28, 28, 28, 28, 24, 15, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 17, 28, 28, 28, 28, 25, 16, 28, 28, 28, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 15, 28, 28, 28, 26, 23, 17, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 16, 28, 28, 28, 28, 24, 15, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 17, 28, 28, 28, 28, 25, 16, 28, 28, 28, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 },
  { 29, 29, 15, 28, 28, 28, 26, 23, 17, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 }
};

int offsetX;
int offsetY;
  
const uint32_t sample_tilesData[] = { 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0xE007E007, 0x48EC87C2, 0x87C248EC, 0x87C287C2, 0x87C2E007, 0x48EC6781, 0x678148EC, 0x48EC6781, 0x6781E007, 0x87C26781, 0x678187C2, 0x48EC87C2, 0x678187C2, 0x67816A31, 0x6A316781, 0x87C287C2, 0x67816781, 0x87C248EC, 0x67816A31, 0x87C26781, 0x6781E007, 0x87C287C2, 0x67816781, 0x6A316781, 0x48EC87C2, 0x06216781, 0x67816781, 0x6A316781, 0x87C26781, 0x06216781, 0x6A310621, 0x6A316A31, 0x6A31E007, 0x67810621, 0x06216A31, 0x06210621, 0x6A31E007, 0x6A310621, 0x06216A31, 0x06210621, 0x87C2E007, 0x678187C2, 0x06210621, 0x06210621, 0x87C2E007, 0x6A3187C2, 0x06210621, 0x06210621, 0x6781E007, 0x06216781, 0x06210621, 0x06210621, 0xE007E007, 0x06216A31, 0x06216A31, 0x06210621, 0xE007E007, 0x678187C2, 0x6A310621, 0x06210621, 0x6A31E007, 0x67816781, 0x06210621, 0x06210621, 0x678187C2, 0x06216A31, 0x06216A31, 0x06210621, 0x67816781, 0x06210621, 0x06210621, 0x06210621, 0x6A31E007, 0x67816A31, 0x06210621, 0x06210621, 0x87C2E007, 0x6A316781, 0x06210621, 0x06210621, 0x6781E007, 0x06216781, 0x06210621, 0x06210621, 0xE007E007, 0x06216A31, 0x06216A31, 0x06210621, 0x678187C2, 0x06210621, 0x06210621, 0x06210621, 0x67816781, 0x06210621, 0x06210621, 0x06210621, 0x6A31E007, 0x67810621, 0x06216A31, 0x06210621, 0x0621E007, 0x6A310621, 0x06216A31, 0x06210621, 0x6A31E007, 0x67816A31, 0x06210621, 0x06210621, 0x87C2E007, 0x6A316781, 0x06210621, 0x06210621, 0x6781E007, 0x06216781, 0x06210621, 0x06210621, 0xE007E007, 0x06216A31, 0x06216A31, 0x06210621, 0x6A31E007, 0x678187C2, 0x6A310621, 0x06210621, 0x6A31E007, 0x67816781, 0x06210621, 0x06210621, 0x87C287C2, 0x48EC48EC, 0x87C287C2, 0x87C287C2, 0x678148EC, 0x87C287C2, 0x48EC6781, 0x678148EC, 0x87C248EC, 0x67816781, 0x48EC87C2, 0x87C248EC, 0x87C287C2, 0x67816A31, 0x87C287C2, 0x87C287C2, 0x678187C2, 0x6A316A31, 0x87C26781, 0x678187C2, 0x6A316781, 0x67816781, 0x67816A31, 0x06216781, 0x06216A31, 0x67816781, 0x6A310621, 0x06216A31, 0x06210621, 0x6A316A31, 0x6A310621, 0x6A310621, 0x87C287C2, 0x48EC48EC, 0x87C287C2, 0x87C287C2, 0x678148EC, 0x87C287C2, 0x48EC6781, 0x678148EC, 0x87C248EC, 0x67816781, 0x48EC87C2, 0x87C248EC, 0x87C287C2, 0x67816A31, 0x87C287C2, 0x87C287C2, 0x678187C2, 0x6A316A31, 0x87C26781, 0x678187C2, 0x6A316781, 0x67816781, 0x67816A31, 0x06216781, 0x06216A31, 0x67816781, 0x6A310621, 0x06216A31, 0x06210621, 0x6A316A31, 0x6A310621, 0x6A310621, 0x87C248EC, 0x48EC87C2, 0x87C248EC, 0x87C287C2, 0x87C287C2, 0x48EC6781, 0x678148EC, 0x48EC6781, 0x67816781, 0x87C26781, 0x678187C2, 0x48EC87C2, 0x48EC6781, 0x678148EC, 0x6A316781, 0x87C287C2, 0x87C26781, 0x678187C2, 0x67816A31, 0x87C26781, 0x67810621, 0x6A316781, 0x67810621, 0x6A316781, 0x6A310621, 0x6A316A31, 0x6A310621, 0x06216A31, 0x06216A31, 0x6A316A31, 0x06210621, 0x06210621, 0x87C287C2, 0x48EC48EC, 0x87C287C2, 0xE007E007, 0x678148EC, 0x87C287C2, 0x48EC6781, 0xE00748EC, 0x87C248EC, 0x67816781, 0x48EC87C2, 0x87C248EC, 0x87C287C2, 0x67816A31, 0x87C287C2, 0x87C287C2, 0x678187C2, 0x6A316A31, 0x87C26781, 0x678187C2, 0x6A316781, 0x67816781, 0x67816A31, 0xE0076781, 0x06216A31, 0x67816781, 0x6A310621, 0x48EC87C2, 0x06210621, 0x6A316A31, 0x6A310621, 0x87C26781, 0x06210621, 0x6A310621, 0x06216781, 0xE0076A31, 0x06210621, 0x6A310621, 0x6A316A31, 0xE007E007, 0x06210621, 0x06210621, 0x87C26781, 0xE00748EC, 0x06210621, 0x06210621, 0x87C26A31, 0xE00787C2, 0x06210621, 0x06210621, 0x67810621, 0xE0076781, 0x06210621, 0x6A310621, 0x6A310621, 0xE007E007, 0x06210621, 0x06216A31, 0x87C26781, 0xE007E007, 0x06210621, 0x06210621, 0x67816781, 0xE007E007, 0x06210621, 0x6A310621, 0x67810621, 0xE00787C2, 0x06210621, 0x06210621, 0x67810621, 0xE0076781, 0x06210621, 0x06210621, 0x6A316781, 0xE007E007, 0x06210621, 0x06210621, 0x67816A31, 0xE00787C2, 0x06210621, 0x06210621, 0x67810621, 0xE0076781, 0x06210621, 0x6A310621, 0x6A310621, 0xE007E007, 0x06210621, 0x06210621, 0x06210621, 0x87C26781, 0x06210621, 0x06210621, 0x06210621, 0x67816781, 0x06210621, 0x6A310621, 0x67816781, 0xE00787C2, 0x06210621, 0x6A310621, 0x67816A31, 0xE0076781, 0x06210621, 0x06210621, 0x6A316781, 0xE007E007, 0x06210621, 0x06210621, 0x67816A31, 0xE00787C2, 0x06210621, 0x06210621, 0x67810621, 0xE0076781, 0x06210621, 0x6A310621, 0xE0070621, 0xE007E007, 0x06210621, 0x06216A31, 0x87C26781, 0xE007E007, 0x06210621, 0x06210621, 0x67816781, 0xE0076A31, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x67810621, 0x06216781, 0x06210621, 0x06210621, 0x67810621, 0x06216781, 0x06210621, 0x67810621, 0x6A310621, 0x06216A31, 0x06210621, 0x6A310621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x06210621, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x062C6E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x062C6E32, 0x6A31062C, 0x6E326E32, 0x6E326E32, 0x87226E32, 0x6A31062C, 0x6E326E32, 0x062C6E32, 0x6A316A31, 0x87228722, 0x6E326E32, 0x87226E32, 0x6A31062C, 0x87226A31, 0x6E326E32, 0x6A316E32, 0x6A318722, 0x6A318722, 0x062C6E32, 0x8722062C, 0x6A316A31, 0x6A316A31, 0x6E326E32, 0x8722062C, 0x87226A31, 0x6A318722, 0x6E326E32, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x062C6E32, 0x6A318722, 0x87228722, 0x6A316A31, 0x062C062C, 0x6A318722, 0x87226A31, 0x6A316A31, 0x6A316E32, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316E32, 0x8722062C, 0x87226A31, 0x6A316A31, 0x062C062C, 0x6A318722, 0x6A316A31, 0x6A316A31, 0x062C6E32, 0x6A318722, 0x6A318722, 0x6A316A31, 0x6A316E32, 0x6A316A31, 0x87228722, 0x6A316A31, 0x6A316E32, 0x8722062C, 0x87226A31, 0x6A316A31, 0x062C6E32, 0x8722062C, 0x6A316A31, 0x6A316A31, 0x6E326E32, 0x6A316A31, 0x87226A31, 0x6A318722, 0x062C062C, 0x6A318722, 0x6A316A31, 0x6A316A31, 0x062C6E32, 0x6A318722, 0x87228722, 0x6A316A31, 0x6E326E32, 0x062C6A31, 0x6A318722, 0x6A316A31, 0x062C6E32, 0x6A31062C, 0x6A316A31, 0x6A316A31, 0x6A316E32, 0x8722062C, 0x6A316A31, 0x6A316A31, 0x6E326E32, 0x6A316A31, 0x6A318722, 0x6A316A31, 0x062C6E32, 0x6A318722, 0x87228722, 0x6A316A31, 0x062C062C, 0x6A318722, 0x87226A31, 0x6A316A31, 0x6A316E32, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316E32, 0x8722062C, 0x6A316A31, 0x6A316A31, 0x6E326E32, 0x6E326E32, 0x6E32062C, 0x062C6E32, 0x6E326E32, 0x062C6E32, 0x6E32062C, 0x062C062C, 0x6E32062C, 0x87226A31, 0x6A318722, 0x8722062C, 0x062C8722, 0x6A316A31, 0x6A316A31, 0x6A318722, 0x87228722, 0x87226A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x87226A31, 0x6A318722, 0x87228722, 0x87226A31, 0x6A316A31, 0x6A318722, 0x6A318722, 0x6A318722, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x062C6E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x062C6A31, 0x6E32062C, 0x6E32062C, 0x062C6E32, 0x87226A31, 0x6A318722, 0x062C8722, 0x87226A31, 0x6A316A31, 0x6A318722, 0x87226A31, 0x6A316A31, 0x87226A31, 0x6A316A31, 0x6A318722, 0x87226A31, 0x87226A31, 0x6A318722, 0x6A318722, 0x87228722, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A318722, 0x87226A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6E32062C, 0x6E32062C, 0x6E326E32, 0x062C6E32, 0x6A31062C, 0x062C062C, 0x87226E32, 0x062C062C, 0x6A318722, 0x87228722, 0x87226E32, 0x6A318722, 0x6A316A31, 0x87226A31, 0x87226A31, 0x6A316A31, 0x87226A31, 0x6A316A31, 0x6A318722, 0x87226A31, 0x87226A31, 0x6A318722, 0x6A318722, 0x87228722, 0x6A316A31, 0x87226A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6E32062C, 0x062C6E32, 0x6E326E32, 0x6E326E32, 0x062C062C, 0x062C6E32, 0x6E32062C, 0x6E326E32, 0x062C8722, 0x87226A31, 0x6A318722, 0x062C6E32, 0x87226A31, 0x6A316A31, 0x6A316A31, 0x8722062C, 0x6A316A31, 0x6A316A31, 0x6A318722, 0x87228722, 0x87228722, 0x87226A31, 0x6A318722, 0x6A316A31, 0x87226A31, 0x87226A31, 0x6A316A31, 0x6A318722, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x87226A31, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E32062C, 0x6E326E32, 0x6E326E32, 0x062C6A31, 0x6E32062C, 0x6E326E32, 0x6E326E32, 0x062C6A31, 0x6E328722, 0x6E326E32, 0x6E326E32, 0x87228722, 0x6A316A31, 0x6E32062C, 0x6E326E32, 0x6A318722, 0x062C6A31, 0x6E328722, 0x6E326E32, 0x87226A31, 0x87226A31, 0x6E326A31, 0x6E326E32, 0x6A316A31, 0x6A316A31, 0x062C8722, 0x6E32062C, 0x6A316A31, 0x6A316A31, 0x062C8722, 0x6E326E32, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6E326E32, 0x6A316A31, 0x87226A31, 0x87226A31, 0x6E32062C, 0x6A316A31, 0x6A316A31, 0x87226A31, 0x062C062C, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6E326A31, 0x6A316A31, 0x6A316A31, 0x062C8722, 0x6E326A31, 0x6A316A31, 0x6A316A31, 0x87226A31, 0x062C062C, 0x6A316A31, 0x87226A31, 0x87226A31, 0x6E32062C, 0x6A316A31, 0x87226A31, 0x6A316A31, 0x6E326A31, 0x6A316A31, 0x6A316A31, 0x062C8722, 0x6E326A31, 0x6A316A31, 0x6A316A31, 0x062C8722, 0x6E32062C, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6E326E32, 0x6A316A31, 0x6A316A31, 0x87226A31, 0x062C062C, 0x6A316A31, 0x87226A31, 0x87226A31, 0x6E32062C, 0x6A316A31, 0x87226A31, 0x6A31062C, 0x6E326E32, 0x6A316A31, 0x6A316A31, 0x062C6A31, 0x6E32062C, 0x6A316A31, 0x6A316A31, 0x062C8722, 0x6E326A31, 0x6A316A31, 0x87226A31, 0x6A316A31, 0x6E326E32, 0x6A316A31, 0x87228722, 0x87226A31, 0x6E32062C, 0x6A316A31, 0x6A318722, 0x87226A31, 0x062C062C, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6E326A31, 0x6A316A31, 0x6A316A31, 0x062C8722, 0x6E326A31, 0x062C6A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x87226A31, 0x6A31062C, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A318722, 0x062C8722, 0x6A31062C, 0x6A316A31, 0x87226A31, 0x062C8722, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x062C6A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x062C6A31, 0x6A31062C, 0x062C6A31, 0x6A316A31, 0x6A316A31, 0x6A318722, 0x062C8722, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A318722, 0x6A316A31, 0x87226A31, 0x6A318722, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x87226A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6A316A31, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32, 0x6E326E32 };
uint32_t buffer1[W * 8 / 2];
uint32_t buffer2[W * 8 / 2];
//Image buffer1(W, 8);
//Image buffer2(W, 8);

inline void drawTileRow(uint32_t *buffer, const int bufferOffset, const int tileOffset, const int yOffsetRemainder, const int y, const int x) __attribute__((always_inline));

void setup() {
  gb.begin();
  gb.display.init(0, 0, ColorMode::rgb565);
  gb.setFrameRate(40);
  
  SerialUSB.begin(9600);
}

void loop() {
  while (!gb.update());

  if (gb.buttons.repeat(Button::right, 0)) {
    if (LAYER_WIDTH * 8 - offsetX > W) {
      offsetX += 1;
    }
  }
  if (gb.buttons.repeat(Button::left, 0)) {
    if (offsetX > 0) {
      offsetX -= 1;
    }
  }
  if (gb.buttons.repeat(Button::down, 0)) {
    if (LAYER_HEIGHT * 8 - offsetY > H) {
      offsetY += 1;
    }
  }
  if (gb.buttons.repeat(Button::up, 0)) {
    if (offsetY > 0) {
      offsetY -= 1;
    }
  }
  
  draw();

  if (gb.frameCount % 25 == 0) SerialUSB.printf("CPU: %i\n", gb.getCpuLoad());
}

void draw() {
/*
  for (int row = 0; row < H / 8; row++) {
    Image *buffer = row % 2 == 0 ? &buffer1 : &buffer2;
    
    int xStart = offsetX / 16;
    int xEnd = xStart + W / 8;
    int yStart = offsetY / 16 + row;
    int yEnd = yStart + 1;

    for (int y = yStart; y <= yEnd; y++) {
      for (int x = xStart; x <= xEnd; x++) {
        sample_tiles.setFrame(layer2[y][x]);
        buffer->drawImage(x * 8 - offsetX / 2, (y * 8 - offsetY / 2) - row * 8, sample_tiles);
      }
    }

    xStart = offsetX / 8;
    xEnd = xStart + W / 8;
    yStart = offsetY / 8 + row;
    yEnd = yStart + 1;
    
    for (int y = yStart; y <= yEnd; y++) {
      for (int x = xStart; x <= xEnd; x++) {
        sample_tiles.setFrame(layer1[y][x]);
        buffer->drawImage(x * 8 - offsetX, (y * 8 - offsetY) - row * 8, sample_tiles);
      }
    }

    gb.tft.andy();
    gb.tft.drawBuffer(0, row * 8, buffer->_buffer, 160, 8);
  }
  */
  
  for (int row = 0; row < H / 8; row++) {
    uint32_t *buffer = row % 2 == 0 ? (uint32_t *)&buffer1 : (uint32_t *)&buffer2;

    int yIndex = offsetY / 8 + row;
    int yOffsetRemainder = offsetY % 8;

    for (int xIndex = 0; xIndex < W / 8; xIndex++) {
      int tileOffset = layer2[row][xIndex] * 8 * 8 / 2;
      int bufferOffset = xIndex * 8 / 2;
      for (int y = 0; y < 8; y++) {
        buffer[bufferOffset + 0 + y * W / 2] = sample_tilesData[tileOffset + 0 + y * 8 / 2];
        buffer[bufferOffset + 1 + y * W / 2] = sample_tilesData[tileOffset + 1 + y * 8 / 2];
        buffer[bufferOffset + 2 + y * W / 2] = sample_tilesData[tileOffset + 2 + y * 8 / 2];
        buffer[bufferOffset + 3 + y * W / 2] = sample_tilesData[tileOffset + 3 + y * 8 / 2];
      }
    }
    
    for (int xIndex = 0; xIndex < W / 8; xIndex++) {
      int tileOffset = layer1[yIndex][xIndex] * 8 * 8 / 2;
      int bufferOffset = xIndex * 8 / 2;
      for (int y = yOffsetRemainder; y < 8; y++) {
        drawTileRow(buffer, bufferOffset, tileOffset, yOffsetRemainder, y, 0);
        drawTileRow(buffer, bufferOffset, tileOffset, yOffsetRemainder, y, 1);
        drawTileRow(buffer, bufferOffset, tileOffset, yOffsetRemainder, y, 2);
        drawTileRow(buffer, bufferOffset, tileOffset, yOffsetRemainder, y, 3);
      }
      
      tileOffset = layer1[yIndex+1][xIndex] * 8 * 8 / 2;
      for (int y = 0; y < yOffsetRemainder; y++) {
        drawTileRow(buffer, bufferOffset, tileOffset, yOffsetRemainder - 8, y, 0);
        drawTileRow(buffer, bufferOffset, tileOffset, yOffsetRemainder - 8, y, 1);
        drawTileRow(buffer, bufferOffset, tileOffset, yOffsetRemainder - 8, y, 2);
        drawTileRow(buffer, bufferOffset, tileOffset, yOffsetRemainder - 8, y, 3);
      }
      
    }

    gb.tft.andy();
    gb.tft.drawBuffer(0, row * 8, (uint16_t *)buffer, W, 8);
  }
}


inline void drawTileRow(uint32_t *buffer, const int bufferOffset, const int tileOffset, const int yOffsetRemainder, const int y, const int x) {
  if ((sample_tilesData[tileOffset + x + y * 8 / 2] & 0xffff0000) == 0xE0070000) {
    if ((sample_tilesData[tileOffset + x + y * 8 / 2] & 0xffff) == 0xE007) {
      // do nothing
    }
    else {
      buffer[bufferOffset + x + (y - yOffsetRemainder) * W / 2] = (buffer[bufferOffset + x + (y - yOffsetRemainder) * W / 2] & 0xffff0000) | (sample_tilesData[tileOffset + x + y * 8 / 2] & 0xffff);
    }
  }
  else if ((sample_tilesData[tileOffset + x + y * 8 / 2] & 0xffff) == 0xE007) {
    buffer[bufferOffset + x + (y - yOffsetRemainder) * W / 2] = (buffer[bufferOffset + x + (y - yOffsetRemainder) * W / 2] & 0xffff) | (sample_tilesData[tileOffset + x + y * 8 / 2] & 0xffff0000);
  }
  else {
    buffer[bufferOffset + x + (y - yOffsetRemainder) * W / 2] = sample_tilesData[tileOffset + x + y * 8 / 2];
  }
}

